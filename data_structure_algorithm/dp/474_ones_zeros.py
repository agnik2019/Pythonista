from typing import List
# Bruteforce
'''
class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        def count_1s_0s(numstr):
            zeros = numstr.count("0")
            ones = numstr.count("1")
            return (zeros,ones)
        def dfs(index,zeros,ones):
            if index == len(strs) or (m==0 and n==0):
                return 0
            zero,one = count_1s_0s(strs[index])
            include = 0
            if zeros>= zero and ones >= one:
                include = 1+dfs(index+1,zeros-zero,ones-one)
            exclude = dfs(index+1,zeros,ones)
            return max(include,exclude)
        return dfs(0,m,n)

'''
# Bottom up approach
class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        dp = [[[-1 for col in range(n+1)]for col in range(m+1)]for l in range(len(strs))]
        def dfs(index,zeros,ones):
            if index == len(strs) or (m==0 and n==0):
                return 0
            if dp[index][zeros][ones] != -1:
                return dp[index][zeros][ones]
            zero,one = strs[index].count("0"),strs[index].count("1")
            include = 0
            if zeros>= zero and ones >= one:
                include = 1+dfs(index+1,zeros-zero,ones-one)
            exclude = dfs(index+1,zeros,ones)
            dp[index][zeros][ones] = max(include,exclude)
            return dp[index][zeros][ones]
        return dfs(0,m,n)

strs

m = 50
n = 50
print(Solution().findMaxForm(strs,m,n))